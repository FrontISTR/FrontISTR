variables:
  REGISTRY: registry.gitlab.com/frontistr-commons/frontistr
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/FrontISTR/${CI_COMMIT_TAG}"

image: ${REGISTRY}/build:latest

stages:
    - build
    - test
    - build_for_deploy
    - deploy
    - registry
    - release

build/serial:
    stage: build
    script:
        - cmake -Bbuild_serial -DWITH_MPI=OFF -DWITH_OPENMP=OFF -DWITH_ML=OFF -DWITH_MUMPS=OFF -H.
        - cmake --build build_serial -- -j $(nproc)
    artifacts:
        paths:
            - build_serial/
        expire_in: 100min

build/openmp:
    stage: build
    script:
        - cmake -Bbuild_openmp -DWITH_MPI=OFF -DWITH_OPENMP=ON -DWITH_ML=OFF -DWITH_MUMPS=OFF -H.
        - cmake --build build_openmp -- -j $(nproc)
    artifacts:
        paths:
            - build_openmp/
        expire_in: 100min
build/mpi:
    stage: build
    script:
        - cmake -Bbuild_mpi -DWITH_MPI=ON -DWITH_OPENMP=OFF -H.
        - cmake --build build_mpi -- -j $(nproc)
    artifacts:
        paths:
            - build_mpi/
        expire_in: 100min
build/hybrid:
    stage: build
    script:
        - cmake -Bbuild_hybrid -DWITH_MPI=ON -DWITH_OPENMP=ON -H.
        - cmake --build build_hybrid -- -j $(nproc)
    artifacts:
        paths:
            - build_hybrid/
        expire_in: 100min

.test:
    stage: test
    artifacts:
        paths:
            - run_test
        expire_in: 1week
        when: on_failure

test/serial/serial:
    extends: .test
    needs: ["build/serial"]
    dependencies:
        - build/serial
    script:
        - cd build_serial
        - ctest -L serial --output-on-failure
test/openmp/serial:
    extends: .test
    needs: ["build/openmp"]
    dependencies:
        - build/openmp
    script:
        - cd build_openmp
        - ctest -L serial --output-on-failure
test/openmp/openmp:
    extends: .test
    needs: ["build/openmp"]
    dependencies:
        - build/openmp
    script:
        - cd build_openmp
        - ctest -L openmp --output-on-failure
test/mpi/serial:
    extends: .test
    needs: ["build/mpi"]
    dependencies:
        - build/mpi
    script:
        - cd build_mpi
        - ctest -L serial --output-on-failure
test/mpi/mpi:
    extends: .test
    needs: ["build/mpi"]
    dependencies:
        - build/mpi
    script:
        - cd build_mpi
        - ctest -L mpi    --output-on-failure
test/hybrid/serial:
    extends: .test
    needs: ["build/hybrid"]
    dependencies:
        - build/hybrid
    script:
        - cd build_hybrid
        - ctest -L serial --output-on-failure
test/hybrid/openmp:
    extends: .test
    needs: ["build/hybrid"]
    dependencies:
        - build/hybrid
    script:
        - cd build_hybrid
        - ctest -L openmp --output-on-failure
test/hybrid/mpi:
    extends: .test
    needs: ["build/hybrid"]
    dependencies:
        - build/hybrid
    script:
        - cd build_hybrid
        - ctest -L mpi    --output-on-failure
test/hybrid/hybrid:
    extends: .test
    needs: ["build/hybrid"]
    dependencies:
        - build/hybrid
    script:
        - cd build_hybrid
        - ctest -L hybrid --output-on-failure
document:
    image: ${REGISTRY}/document:latest
    stage: build_for_deploy
    needs: []
    script:
        - cp doc/_redirects public/_redirects
    artifacts:
        paths:
            - public
        expire_in: 100min

doxygen:
    image: ${REGISTRY}/document:latest
    stage: build_for_deploy
    needs: []
    script:
        - cmake -Bbuild_doc -H. -DWITH_DOC=ON
        - make -C build_doc doc
        - rm -rf public/doxygen
        - mv build_doc/doc/html public/doxygen
    artifacts:
        paths:
            - public
        expire_in: 100min

pages:
    stage: deploy
    dependencies:
        - document
        - doxygen
        - x86_64-w64-mingw32/thread-openblas
        - x86_64-w64-mingw32/hybrid-msmpi-openblas
        - x86_64-w64-mingw32/hybrid-impi-mkl_intelthread
    script:
        - ls public
        - echo /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.zip /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.thread_openblas.zip 301 >> public/_redirects
        - echo /FrontISTR/release/x86_64-w64-mingw32-msmpi/FrontISTR-latest.zip /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.hybrid_msmpi_openblas.zip 301 >> public/_redirects
        - echo /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.thread_openblas.zip /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-master.thread_openblas.zip 301 >> public/_redirects
        - echo /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.hybrid_msmpi_openblas.zip /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-master.hybrid_msmpi_openblas.zip 301 >> public/_redirects
        - echo /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.hybrid_impi_mkl_intelthread.zip /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-master.hybrid_impi_mkl_intelthread.zip 301 >> public/_redirects
    artifacts:
        paths:
            - public
        expire_in: 20min
    only:
      - master
      - release

docker/fistr1:
  image: docker:latest
  stage: build_for_deploy
  needs: []
  services:
    - docker:dind
  script:
    - apk add curl make
    - mkdir -p /root/.docker/cli-plugins
    - curl -sSLo /root/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64
    - chmod +x /root/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - apk add make
    - cd docker/container
    - make push
  tags:
    - docker

x86_64-w64-mingw32/thread-openblas:
    image: ${REGISTRY}/x86_64-w64-mingw32/thread:openblas
    stage: build_for_deploy
    needs: []
    script:
        - sed -i -e 's/${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}//' ./fistr1/CMakeLists.txt
        - cmake  -Bbuild -H.
          -DCMAKE_TOOLCHAIN_FILE=${LIB_ROOT}/toolchain.cmake
          -DCMAKE_LINK_SEARCH_START_STATIC=1
          -DCMAKE_INSTALL_PREFIX=${LIB_ROOT}
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -pthread"
          -DREFINER_LIBRARIES=RcapRefiner
          -DBLAS_LIBRARIES=openblas -DLAPACK_LIBRARIES=openblas -DSCALAPACK_LIBRARIES=mpiseq\;pthread
          -DWITH_METIS=ON -DWITH_MUMPS=ON -DWITH_LAPACK=ON -DWITH_REFINER=ON -DWITH_ML=ON -DWINDOWS=ON -DWITH_MPI=OFF -DWITH_OPENMP=ON -DWITH_MKL=OFF
        - cmake --build build -- -j $(nproc)
        - mkdir -p public/release/x86_64-w64-mingw32/
        - zip -j public/release/x86_64-w64-mingw32/FrontISTR.thread_openblas.zip build/fistr1/fistr1.exe build/fistr1/tools/neu2fstr.exe build/hecmw1/tools/hecmw_part1.exe build/hecmw1/tools/hecmw_vis1.exe build/hecmw1/tools/rmerge.exe build/hecmw1/tools/hec2rcap.exe build/hecmw1/tools/rconv.exe
          README* License* VERSION
    artifacts:
        paths:
            - public
        expire_in: 100min

x86_64-w64-mingw32/hybrid-msmpi-openblas:
    image: ${REGISTRY}/x86_64-w64-mingw32/hybrid:msmpi_openblas
    stage: build_for_deploy
    needs: []
    script:
        - sed -i -e 's/${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}//' ./fistr1/CMakeLists.txt
        - cmake  -Bbuild -H.
          -DCMAKE_TOOLCHAIN_FILE=${LIB_ROOT}/toolchain.cmake
          -DCMAKE_LINK_SEARCH_START_STATIC=1
          -DCMAKE_INSTALL_PREFIX=${LIB_ROOT}
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -pthread"
          -DREFINER_LIBRARIES=RcapRefiner
          -DBLAS_LIBRARIES=openblas -DLAPACK_LIBRARIES=openblas -DSCALAPACK_LIBRARIES=scalapack
          -DMPI_C_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include
          -DMPI_C_LIB_NAMES=msmpi -DMPI_CXX_LIB_NAMES=msmpi -DMPI_Fortran_LIB_NAMES=msmpi -DMPI_msmpi_LIBRARY=msmpi
          -DWITH_METIS=ON -DWITH_MUMPS=ON -DWITH_LAPACK=ON -DWITH_REFINER=ON -DWITH_ML=ON -DWINDOWS=ON -DWITH_MPI=ON -DWITH_OPENMP=ON -DWITH_MKL=OFF
        - cmake --build build -- -j $(nproc)
        - mkdir -p public/release/x86_64-w64-mingw32/
        - zip -j public/release/x86_64-w64-mingw32/FrontISTR.hybrid_msmpi_openblas.zip build/fistr1/fistr1.exe build/fistr1/tools/neu2fstr.exe build/hecmw1/tools/hecmw_part1.exe build/hecmw1/tools/hecmw_vis1.exe build/hecmw1/tools/rmerge.exe build/hecmw1/tools/hec2rcap.exe build/hecmw1/tools/rconv.exe
          README* License* VERSION
          ${LIB_ROOT}/bin/mpiexec.exe ${LIB_ROOT}/bin/smpd.exe ${LIB_ROOT}/lib/msmpi.dll 
    artifacts:
        paths:
            - public
        expire_in: 100min

x86_64-w64-mingw32/hybrid-impi-mkl_intelthread:
    image: ${REGISTRY}/x86_64-w64-mingw32/hybrid:impi_mkl
    stage: build_for_deploy
    needs: []
    script:
        - sed -i -e 's/${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}//' ./fistr1/CMakeLists.txt
        - cmake  -Bbuild -H.
          -DCMAKE_TOOLCHAIN_FILE=${LIB_ROOT}/toolchain.cmake
          -DCMAKE_LINK_SEARCH_START_STATIC=1
          -DCMAKE_INSTALL_PREFIX=${LIB_ROOT}
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -pthread"
          -DREFINER_LIBRARIES=RcapRefiner
          -DBLAS_LIBRARIES=mkl_core_dll -DLAPACK_LIBRARIES=mkl_core_dll
          -DSCALAPACK_LIBRARIES="mkl_scalapack_lp64_dll;mkl_blacs_lp64_dll"
          -DMKL_LIBRARIES="mkl_rt;mkl_intel_lp64_dll;mkl_intel_thread_dll;mkl_core_dll"
          -DMPI_C_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include
          -DMPI_C_LIB_NAMES=impi -DMPI_CXX_LIB_NAMES=impi -DMPI_Fortran_LIB_NAMES=impi -DMPI_impi_LIBRARY=impi
          -DWITH_METIS=ON -DWITH_MUMPS=ON -DWITH_LAPACK=ON -DWITH_REFINER=ON -DWITH_ML=ON -DWINDOWS=ON -DWITH_MPI=ON -DWITH_OPENMP=ON -DWITH_MKL=ON
        - cmake --build build -- -j $(nproc)
        - mkdir -p public/release/x86_64-w64-mingw32/
        - zip -j public/release/x86_64-w64-mingw32/FrontISTR.hybrid_impi_mkl_intelthread.zip build/fistr1/fistr1.exe build/fistr1/tools/neu2fstr.exe build/hecmw1/tools/hecmw_part1.exe build/hecmw1/tools/hecmw_vis1.exe build/hecmw1/tools/rmerge.exe build/hecmw1/tools/hec2rcap.exe build/hecmw1/tools/rconv.exe
          README* License* VERSION
          ${LIB_ROOT}/bin/mpiexec.exe  ${LIB_ROOT}/lib/impi.dll ${LIB_ROOT}/lib/impi.dll ${LIB_ROOT}/lib/libfabric.dll ${LIB_ROOT}/bin/hydra_bstrap_proxy.exe ${LIB_ROOT}/bin/hydra_pmi_proxy.exe
          ${LIB_ROOT}/lib/mkl_blacs_lp64.1.dll ${LIB_ROOT}/lib/mkl_blacs_intelmpi_lp64.1.dll ${LIB_ROOT}/lib/mkl_core.1.dll ${LIB_ROOT}/lib/mkl_intel_thread.1.dll ${LIB_ROOT}/lib/mkl_rt.1.dll ${LIB_ROOT}/lib/libiomp5md.dll ${LIB_ROOT}/lib/mkl_scalapack_lp64.1.dll
          ${LIB_ROOT}/lib/mkl_def.1.dll
    artifacts:
        paths:
            - public
        expire_in: 100min

upload:
  stage: registry
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file public/release/x86_64-w64-mingw32/FrontISTR.hybrid_impi_mkl_intelthread.zip "${PACKAGE_REGISTRY_URL}/FrontISTR.${CI_COMMIT_TAG}.hybrid_impi_mkl_intelthread.zip"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file public/release/x86_64-w64-mingw32/FrontISTR.hybrid_msmpi_openblas.zip "${PACKAGE_REGISTRY_URL}/FrontISTR.${CI_COMMIT_TAG}.hybrid_msmpi_openblas.zip"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file public/release/x86_64-w64-mingw32/FrontISTR.thread_openblas.zip "${PACKAGE_REGISTRY_URL}/FrontISTR.${CI_COMMIT_TAG}.thread_openblas.zip"'

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"FrontISTR.${CI_COMMIT_TAG}.hybrid_impi_mkl_intelthread.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/FrontISTR.${CI_COMMIT_TAG}.hybrid_impi_mkl_intelthread.zip\"}" \
        --assets-link "{\"name\":\"FrontISTR.${CI_COMMIT_TAG}.hybrid_msmpi_openblas.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/FrontISTR.${CI_COMMIT_TAG}.hybrid_msmpi_openblas.zip\"}" \
        --assets-link "{\"name\":\"FrontISTR.${CI_COMMIT_TAG}.thread_openblas.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/FrontISTR.${CI_COMMIT_TAG}.thread_openblas.zip\"}" \
