variables:
  REGISTRY: registry.gitlab.com/frontistr-commons/frontistr

image: ${REGISTRY}/build:latest

stages:
    - build
    - test
    - build_for_deploy
    - deploy

make_serial:
    stage: build
    script:
        - cmake -Bbuild_serial -DWITH_MPI=OFF -DWITH_OPENMP=OFF -DWITH_ML=OFF -DWITH_MUMPS=OFF -H.
        - cmake --build build_serial -- -j $(nproc)
    artifacts:
        paths:
            - build_serial/
        expire_in: 100min

make_openmp:
    stage: build
    script:
        - cmake -Bbuild_openmp -DWITH_MPI=OFF -DWITH_OPENMP=ON -DWITH_ML=OFF -DWITH_MUMPS=OFF -H.
        - cmake --build build_openmp -- -j $(nproc)
    artifacts:
        paths:
            - build_openmp/
        expire_in: 100min
make_mpi:
    stage: build
    script:
        - cmake -Bbuild_mpi -DWITH_MPI=ON -DWITH_OPENMP=OFF -H.
        - cmake --build build_mpi -- -j $(nproc)
    artifacts:
        paths:
            - build_mpi/
        expire_in: 100min
make_hybrid:
    stage: build
    script:
        - cmake -Bbuild_hybrid -DWITH_MPI=ON -DWITH_OPENMP=ON -H.
        - cmake --build build_hybrid -- -j $(nproc)
    artifacts:
        paths:
            - build_hybrid/
        expire_in: 100min

.test:
    stage: test
    artifacts:
        paths:
            - run_test
        expire_in: 1week
        when: on_failure
test_serial:
    extends: .test
    needs: ["make_serial"]
    dependencies:
        - make_serial
    script:
        - cd build_serial
        - ctest -L serial --output-on-failure
test_openmp:
    extends: .test
    needs: ["make_openmp"]
    dependencies:
        - make_openmp
    script:
        - cd build_openmp
        - ctest -L serial --output-on-failure
        - ctest -L openmp --output-on-failure
test_mpi:
    extends: .test
    needs: ["make_mpi"]
    dependencies:
        - make_mpi
    script:
        - cd build_mpi
        - ctest -L serial --output-on-failure
        - ctest -L mpi    --output-on-failure
test_hybrid:
    extends: .test
    needs: ["make_hybrid"]
    dependencies:
        - make_hybrid
    script:
        - cd build_hybrid
        - ctest -L serial --output-on-failure
        - ctest -L openmp --output-on-failure
        - ctest -L mpi    --output-on-failure
        - ctest -L hybrid --output-on-failure
document:
    image: ${REGISTRY}/document:latest
    stage: build_for_deploy
    needs: []
    script:
        - echo '/FrontISTR/manual_ja/ /FrontISTR_manual/ja/ 301' >> public/_redirects
        - echo '/FrontISTR/manual_en/ /FrontISTR_manual/en/ 301' >> public/_redirects
    artifacts:
        paths:
            - public
        expire_in: 100min
    variables:
        GIT_SUBMODULE_STRATEGY: recursive

doxygen:
    image: ${REGISTRY}/document:latest
    stage: build_for_deploy
    needs: []
    script:
        - cmake -Bbuild_doc -H. -DWITH_DOC=ON
        - make -C build_doc doc
        - rm -rf public/doxygen
        - mv build_doc/doc/html public/doxygen
    artifacts:
        paths:
            - public
        expire_in: 100min

pages:
    stage: deploy
    dependencies:
        - document
        - doxygen
        - x86_64-w64-mingw32/openmp-msmpi-openblas
        - x86_64-w64-mingw32/hybrid-msmpi-openblas
        - x86_64-w64-mingw32/hybrid-impi-mkl_intelthread
    script:
        - ls public
        - echo /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.zip       /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.omo.zip 301 >> public/_redirects
        - echo /FrontISTR/release/x86_64-w64-mingw32-msmpi/FrontISTR-latest.zip /FrontISTR/release/x86_64-w64-mingw32/FrontISTR-latest.hmo.zip 301 >> public/_redirects
    artifacts:
        paths:
            - public
        expire_in: 20min
    only:
      - master
      - release

docker/fistr1:
  image: docker:latest
  stage: build_for_deploy
  needs: []
  services:
    - docker:dind
  script:
    - apk add make
    - cd docker/container
    - make push
  tags:
    - docker

x86_64-w64-mingw32/openmp-msmpi-openblas:
    image: ${REGISTRY}/x86_64-w64-mingw32/openblas:openmp
    stage: build_for_deploy
    needs: []
    script:
        - sed -i -e 's/${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}//' ./fistr1/CMakeLists.txt
        - cmake  -Bbuild -H.
          -DCMAKE_TOOLCHAIN_FILE=${LIB_ROOT}/toolchain.cmake
          -DCMAKE_LINK_SEARCH_START_STATIC=1
          -DCMAKE_INSTALL_PREFIX=${LIB_ROOT}
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -pthread"
          -DREFINER_LIBRARIES=RcapRefiner
          -DBLAS_LIBRARIES=openblas -DLAPACK_LIBRARIES=openblas -DSCALAPACK_LIBRARIES=mpiseq\;pthread
          -DWITH_METIS=ON -DWITH_MUMPS=ON -DWITH_LAPACK=ON -DWITH_REFINER=ON -DWITH_ML=ON -DWINDOWS=ON -DWITH_MPI=OFF -DWITH_OPENMP=ON -DWITH_MKL=OFF
        - cmake --build build -- -j $(nproc)
        - mkdir -p public/release/x86_64-w64-mingw32/
        - zip -j public/release/x86_64-w64-mingw32/FrontISTR-latest.omo.zip build/fistr1/fistr1.exe build/fistr1/tools/neu2fstr.exe build/hecmw1/tools/hecmw_part1.exe build/hecmw1/tools/hecmw_vis1.exe build/hecmw1/tools/rmerge.exe build/hecmw1/tools/hec2rcap.exe build/hecmw1/tools/rconv.exe
          README.md README.ja.md License.txt VERSION
    artifacts:
        paths:
            - public
        expire_in: 100min

x86_64-w64-mingw32/hybrid-msmpi-openblas:
    image: ${REGISTRY}/x86_64-w64-mingw32/openblas:hybrid
    stage: build_for_deploy
    needs: []
    script:
        - sed -i -e 's/${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}//' ./fistr1/CMakeLists.txt
        - cmake  -Bbuild -H.
          -DCMAKE_TOOLCHAIN_FILE=${LIB_ROOT}/toolchain.cmake
          -DCMAKE_LINK_SEARCH_START_STATIC=1
          -DCMAKE_INSTALL_PREFIX=${LIB_ROOT}
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -pthread"
          -DREFINER_LIBRARIES=RcapRefiner
          -DBLAS_LIBRARIES=openblas -DLAPACK_LIBRARIES=openblas -DSCALAPACK_LIBRARIES=scalapack
          -DMPI_C_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include
          -DMPI_C_LIB_NAMES=msmpi -DMPI_CXX_LIB_NAMES=msmpi -DMPI_Fortran_LIB_NAMES=msmpi -DMPI_msmpi_LIBRARY=msmpi
          -DWITH_METIS=ON -DWITH_MUMPS=ON -DWITH_LAPACK=ON -DWITH_REFINER=ON -DWITH_ML=ON -DWINDOWS=ON -DWITH_MPI=ON -DWITH_OPENMP=ON -DWITH_MKL=OFF
        - cmake --build build -- -j $(nproc)
        - mkdir -p public/release/x86_64-w64-mingw32/
        - zip -j public/release/x86_64-w64-mingw32/FrontISTR-latest.hmo.zip build/fistr1/fistr1.exe build/fistr1/tools/neu2fstr.exe build/hecmw1/tools/hecmw_part1.exe build/hecmw1/tools/hecmw_vis1.exe build/hecmw1/tools/rmerge.exe build/hecmw1/tools/hec2rcap.exe build/hecmw1/tools/rconv.exe
          README.md README.ja.md License.txt VERSION
          ${LIB_ROOT}/bin/mpiexec.exe ${LIB_ROOT}/bin/smpd.exe ${LIB_ROOT}/lib/msmpi.dll 
    artifacts:
        paths:
            - public
        expire_in: 100min

x86_64-w64-mingw32/hybrid-impi-mkl_intelthread:
    image: ${REGISTRY}/x86_64-w64-mingw32/mkl:hybrid
    stage: build_for_deploy
    needs: []
    script:
        - sed -i -e 's/${CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES}//' ./fistr1/CMakeLists.txt
        - cmake  -Bbuild -H.
          -DCMAKE_TOOLCHAIN_FILE=${LIB_ROOT}/toolchain.cmake
          -DCMAKE_LINK_SEARCH_START_STATIC=1
          -DCMAKE_INSTALL_PREFIX=${LIB_ROOT}
          -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -pthread"
          -DREFINER_LIBRARIES=RcapRefiner
          -DBLAS_LIBRARIES=mkl_core_dll -DLAPACK_LIBRARIES=mkl_core_dll
          -DSCALAPACK_LIBRARIES="mkl_scalapack_lp64_dll;mkl_blacs_lp64_dll"
          -DMKL_LIBRARIES="mkl_rt;mkl_intel_lp64_dll;mkl_intel_thread_dll;mkl_core_dll"
          -DMPI_C_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS=$LIB_ROOT/include
          -DMPI_C_LIB_NAMES=impi -DMPI_CXX_LIB_NAMES=impi -DMPI_Fortran_LIB_NAMES=impi -DMPI_impi_LIBRARY=impi
          -DWITH_METIS=ON -DWITH_MUMPS=ON -DWITH_LAPACK=ON -DWITH_REFINER=ON -DWITH_ML=ON -DWINDOWS=ON -DWITH_MPI=ON -DWITH_OPENMP=ON -DWITH_MKL=ON
        - cmake --build build -- -j $(nproc)
        - mkdir -p public/release/x86_64-w64-mingw32/
        - zip -j public/release/x86_64-w64-mingw32/FrontISTR-latest.himi.zip build/fistr1/fistr1.exe build/fistr1/tools/neu2fstr.exe build/hecmw1/tools/hecmw_part1.exe build/hecmw1/tools/hecmw_vis1.exe build/hecmw1/tools/rmerge.exe build/hecmw1/tools/hec2rcap.exe build/hecmw1/tools/rconv.exe
          README.md README.ja.md License.txt VERSION
          ${LIB_ROOT}/bin/mpiexec.exe  ${LIB_ROOT}/lib/impi.dll ${LIB_ROOT}/lib/impi.dll ${LIB_ROOT}/lib/libfabric.dll ${LIB_ROOT}/bin/hydra_bstrap_proxy.exe ${LIB_ROOT}/bin/hydra_pmi_proxy.exe
          ${LIB_ROOT}/lib/mkl_def.1.dll ${LIB_ROOT}/lib/mkl_mc.1.dll ${LIB_ROOT}/lib/mkl_mc3.1.dll ${LIB_ROOT}/lib/mkl_avx.1.dll ${LIB_ROOT}/lib/mkl_avx2.1.dll ${LIB_ROOT}/lib/mkl_avx512.1.dll ${LIB_ROOT}/lib/mkl_blacs_lp64.1.dll ${LIB_ROOT}/lib/mkl_blacs_intelmpi_lp64.1.dll ${LIB_ROOT}/lib/mkl_core.1.dll ${LIB_ROOT}/lib/mkl_intel_thread.1.dll ${LIB_ROOT}/lib/mkl_rt.1.dll ${LIB_ROOT}/lib/libiomp5md.dll ${LIB_ROOT}/lib/mkl_scalapack_lp64.1.dll 
    artifacts:
        paths:
            - public
        expire_in: 100min

